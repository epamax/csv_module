// package main

/*
Consider a data set that has key columns: sourceTypeID, regClassID, fuelTypeID, modelYearID, and opModeID
                   and two value columns: emissionRate and emissionRateIM
	A test set could be generated by creating random values for all MOVES source types, reg classes, and fuel types;
	all model years 1960-2060; and all operating modes <= 36. Ignoring "real pairings" constraints (i.e., regClass 47 motorcycles
	are OK!), this should result in 1,240,785 rows (13*9*5*101*21)

Benchmark data storage and retrieval in Go for 3 different methods:
	• Slice of structs
	• Map of key structs to value
	• Nested maps of keys to value

How much memory does each method take?
How long does it take to retrieve a random value?
How long does it take to retrieve the last value stored?

https://www.practical-go-lessons.com/chap-34-benchmarks has a thorough introduction to benchmarking in Go.
*/

/*
type Key struct {
	SourceTypeID int
	RegClassID   int
	FuelTypeID   int
	ModelYearID  int
	OpModeID     int
}

type Value struct {
	EmissionRate   float64
	EmissionRateIM float64
}

type KeyValue struct {
	SourceTypeID   int
	RegClassID     int
	FuelTypeID     int
	ModelYearID    int
	OpModeID       int
	EmissionRate   float64
	EmissionRateIM float64
}

func WriteDataToCSV(csvFile string) {
	Generate rows for each combination of:
	SourceTypeIDs 11, 21, 31, 32, 41, 42, 43, 51, 52, 53, 54, 61, 62
	RegClassIDs 10, 20, 30, 41, 42, 46, 47, 48, 49
	FuelTypeIDs 1, 2, 3, 5, 9
	ModelYearIDs 1960-2060, inclusive
	OpModeIDs 0,1,11,12,13,14,15,16,21,22,23,24,25,26,27,28,29,30,33,35,36
	EmissionRate and EmissionRateIM should be random values

	save results to file

	this function does not need to be benchmarked
}

func BuildSliceOfStructs(csvFile string) []KeyValue {
	parse CSV file into []KeyValue
}

func LookupSliceOfStructs(data []KeyValue, sourceTypeID, regClassID, fuelTypeID, modelYearID, opModeID int) (float64, float64) {
	// return the correct KeyValue in data corresponding to the input values
}

func BuildMapOfKeysToValues(csvFile string) map[Key]Value {
	// parse CSV file into map[Key]Value
}

func LookupMapOfKeysToValues(data map[Key]Value, sourceTypeID, regClassID, fuelTypeID, modelYearID, opModeID int) (float64, float64) {
	// return the correct Value in data corresponding to the input values
}

func BuildNestedMap(csvFile string) map[int]map[int]map[int]map[int]map[int]Value {
	// parse CSV file into map[Key]Value
}

func LookupNestedMap(data map[int]map[int]map[int]map[int]map[int]Value, sourceTypeID, regClassID, fuelTypeID, modelYearID, opModeID int) (float64, float64) {
	// return the correct Value in data corresponding to the input values
}
*/
